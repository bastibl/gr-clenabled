# auto-generated by grc.converter

id: clenabled_clSignalSource
label: OpenCL Signal Source
category: '[OpenCL-Accelerated]'

parameters:
-   id: type
    label: Data Type
    dtype: enum
    options: [complex, float, int]
    option_attributes:
        datatype: ['1', '2', '3']
        input: [complex, float, int]
        output: [complex, float, int]
    hide: part
-   id: openCLPlatform
    label: OpenCL Platform Type
    dtype: enum
    options: ['1', '2', '3', '4']
    option_labels: [GPU, Accelerator, CPU, Any]
-   id: devices
    label: OpenCL Device
    dtype: enum
    options: ['1', '2']
    option_labels: [Any, Specific]
    option_attributes:
        hide_specific: [all, '']
-   id: platformId
    label: Platform Id
    dtype: enum
    options: ['0', '1', '2', '3']
    hide: ${ devices.hide_specific }
-   id: deviceId
    label: Device Id
    dtype: enum
    options: ['0', '1', '2', '3']
    hide: ${ devices.hide_specific }
-   id: waveform
    label: Waveform
    dtype: enum
    options: ['1', '2']
    option_labels: [Cosine, Sine]
-   id: samp_rate
    label: Sample Rate
    dtype: float
    default: samp_rate
-   id: freq
    label: Frequency
    dtype: float
    default: '1000'
-   id: amplitude
    label: Amplitude
    dtype: float
    default: '1.0'
-   id: setDebug
    label: Debug
    dtype: enum
    options: ['0', '1']
    option_labels: ['Off', 'On']

outputs:
-   domain: stream
    dtype: ${ type.output }

templates:
    imports: import clenabled
    make: |-
        % if devices == 1:
        clenabled.clSignalSource(${type.datatype},${openCLPlatform},1,0,0,${samp_rate},${waveform}, ${freq}, ${amplitude},${setDebug})
        % else:
        clenabled.clSignalSource(${type.datatype},${openCLPlatform},${devices},${platformId},${deviceId},${samp_rate},${waveform}, ${freq}, ${amplitude},${setDebug})
        % endif

documentation: |-
    Generic OpenCL enabled version of the built-in Signal Source block for cos and sin signals.

file_format: 1
