# auto-generated by grc.converter

id: clenabled_clcomplexfilter
label: OpenCL Complex FIR Filter
category: '[OpenCL-Accelerated]'

parameters:
-   id: openCLPlatform
    label: OpenCL Platform Type
    dtype: enum
    options: ['1', '2', '3', '4']
    option_labels: [GPU, Accelerator, CPU, Any]
-   id: devices
    label: OpenCL Device
    dtype: enum
    options: ['1', '2']
    option_labels: [Any, Specific]
    option_attributes:
        hide_specific: [all, '']
-   id: platformId
    label: Platform Id
    dtype: enum
    options: ['0', '1', '2', '3']
    hide: ${ devices.hide_specific }
-   id: deviceId
    label: Device Id
    dtype: enum
    options: ['0', '1', '2', '3']
    hide: ${ devices.hide_specific }
-   id: taps
    label: Taps
    dtype: complex_vector
-   id: decimation
    label: Decimation
    dtype: int
    default: '1'
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: samp_rate
-   id: setDebug
    label: Debug
    dtype: enum
    options: ['0', '1']
    option_labels: ['Off', 'On']

inputs:
-   domain: stream
    dtype: complex

outputs:
-   domain: stream
    dtype: complex

templates:
    imports: |-
        import clenabled
        from gnuradio.filter import firdes
    make: "% if devices == 1:\n  clenabled.clComplexFilter(${openCLPlatform},1,0,0,${decimation},${taps},1,${setDebug})\n\
        \t% else:\n  clenabled.clComplexFilter(${openCLPlatform},${devices},${platformId},${deviceId},${decimation},${taps},1,${setDebug})\n\
        \t% endif\n\t"
    callbacks:
    - set_taps2(${taps})

documentation: "This filter is an OpenCL enabled version of a generic Tap-based FIR\
    \ filter with complex taps.\n\nFilter performance based on the number of taps\
    \ can be tested with the test-clfilter command-line tool.  In general what you\
    \ will find in terms of filter performance is that filters will perform in this\
    \ order (highest to lowest throughput):\n\n1. GNURadio FFT Filter, 2. OpenCL FIR\
    \ Filter\n\nThen depending on the number of taps, either the GNURadio FIR or OpenCL\
    \ FFT filter.\tAgain use the included test-clfilter command-line tool to select\
    \ the best performing filter."

file_format: 1
