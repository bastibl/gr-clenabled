# auto-generated by grc.converter

id: clenabled_clRootRaisedCosineFilter
label: OpenCL Root Raised Cosine Filter
category: '[OpenCL-Accelerated]'

parameters:
-   id: openCLPlatform
    label: OpenCL Platform Type
    dtype: enum
    options: ['1', '2', '3', '4']
    option_labels: [GPU, Accelerator, CPU, Any]
-   id: devices
    label: OpenCL Device
    dtype: enum
    options: ['1', '2']
    option_labels: [Any, Specific]
    option_attributes:
        hide_specific: [all, '']
-   id: platformId
    label: Platform Id
    dtype: enum
    options: ['0', '1', '2', '3']
    hide: ${ devices.hide_specific }
-   id: deviceId
    label: Device Id
    dtype: enum
    options: ['0', '1', '2', '3']
    hide: ${ devices.hide_specific }
-   id: use_time
    label: Filter Type
    dtype: enum
    options: ['True', 'False']
    option_labels: [Time Domain (FIR), Frequency Domain (FFT)]
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: samp_rate
-   id: sym_rate
    label: Symbol Rate
    dtype: real
    default: '1.0'
-   id: alpha
    label: Alpha
    dtype: real
    default: '0.35'
-   id: ntaps
    label: Num Taps
    dtype: int
    default: 11*samp_rate
-   id: setDebug
    label: Debug
    dtype: enum
    options: ['0', '1']
    option_labels: ['Off', 'On']

inputs:
-   domain: stream
    dtype: complex

outputs:
-   domain: stream
    dtype: complex

templates:
    imports: |-
        import clenabled
        from gnuradio.filter import firdes
    make: "% if devices == 1:\n  clenabled.clFilter(${openCLPlatform},1,0,0,${decimation},firdes.root_raised_cosine(\n\
        \t${gain}, ${samp_rate}, ${sym_rate}, ${alpha}, ${ntaps}),1,${setDebug},${use_time})\n\
        \t% else:\n  clenabled.clFilter(${openCLPlatform},${devices},${platformId},${deviceId},${decimation},firdes.root_raised_cosine(\n\
        \t${gain}, ${samp_rate}, ${sym_rate}, ${alpha}, ${ntaps}),1,${setDebug},${use_time})\n\
        \t% endif\n\t"
    callbacks:
    - set_taps2(clenabled.firdes.root_raised_cosine(${gain}, ${samp_rate}, ${sym_rate},
        ${alpha}, ${ntaps}))

documentation: "This filter is an OpenCL enabled version of the built-in root raised\
    \ cosine filter.\n\nFilter performance based on the number of taps can be tested\
    \ with the test-clfilter command-line tool.  In gerneral what you will find in\
    \ terms of filter performance is that filters will perform in this order (highest\
    \ to lowest throughput):\n\n1. GNURadio FFT Filter, 2. OpenCL FIR Filter\n\nThen\
    \ depending on the number of taps, either the GNURadio FIR or OpenCL FFT filter.\t\
    Again use the included test-clfilter command-line tool to select the best performing\
    \ filter."

file_format: 1
