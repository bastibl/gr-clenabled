# auto-generated by grc.converter

id: clenabled_clKernel2To1
label: OpenCL Custom Kernel 2-to-1
category: '[OpenCL-Enabled]'

parameters:
-   id: type
    label: Data Type
    dtype: enum
    options: [complex, float, int]
    option_attributes:
        datatype: ['1', '2', '3']
        input: [complex, float, int]
        output: [complex, float, int]
    hide: part
-   id: openCLPlatform
    label: OpenCL Platform Type
    dtype: enum
    options: ['1', '2', '3', '4']
    option_labels: [GPU, Accelerator, CPU, Any]
-   id: devices
    label: OpenCL Device
    dtype: enum
    options: ['1', '2']
    option_labels: [Any, Specific]
    option_attributes:
        hide_specific: [all, '']
-   id: platformId
    label: Platform Id
    dtype: enum
    options: ['0', '1', '2', '3']
    hide: ${ devices.hide_specific }
-   id: deviceId
    label: Device Id
    dtype: enum
    options: ['0', '1', '2', '3']
    hide: ${ devices.hide_specific }
-   id: file
    label: Kernel File
    dtype: file_open
-   id: fnname
    label: Kernel Function Name
    dtype: string
-   id: setDebug
    label: Debug
    dtype: enum
    options: ['0', '1']
    option_labels: ['Off', 'On']

inputs:
-   label: in1
    domain: stream
    dtype: ${ type.input }
-   label: in2
    domain: stream
    dtype: ${ type.input }

outputs:
-   domain: stream
    dtype: ${ type.output }

templates:
    imports: import clenabled
    make: |-
        % if devices == 1:
        clenabled.clKernel2To1(${type.datatype},${openCLPlatform},1,0,0,${fnname},${file},${setDebug})
        % else:
        clenabled.clKernel2To1(${type.datatype},${openCLPlatform},${devices},${platformId},${deviceId},${fnname},${file},${setDebug})
        % endif

documentation: |-
    Generic OpenCL enabled block to take  a kernel specified in a file with the given function name and run it.

file_format: 1
